/**
    Project: libtpc
    File name: TpcIndexReader.h
    
    @author valerio
    @version 1.0 7/25/17.
*/

#ifndef LIBTPC_TPCINDEXREADER_H
#define LIBTPC_TPCINDEXREADER_H

#include "TpcCommons.h"
#include <vector>
#include <string>
#include <lucene++/LuceneHeaders.h>
#include <cfloat>

namespace tpc {

    /*!
     * @enum QueryType
     * @brief the type of query to perform on the index
     */
    enum class QueryType {
        document = 1, sentence_without_ids = 2, sentence_with_ids = 3
    };

    /*!
     * @struct SentenceSummary
     * @brief data structure that contains summary information related to a sentence as the result of a search
     *
     * @var <b>sentence_id</b> the identifier of the sentence
     * stored in the Lucene index
     * @var <b>score</b> the score of the sentence returned by the search
     */
    struct SentenceSummary {
        int sentence_id{-1};
        double score{0};
    };

    /*!
     * @struct SentenceDetails
     * @brief data structure that contains detailed information related to a sentence
     *
     * @var <b>sentence_id</b> the identifier of the sentence
     * @var <b>doc_position_begin</b> position in the document where the sentence begins (-1 if not set)
     * @var <b>doc_position_end</b> position in the document where the sentence ends (-1 if not set)
     * @var <b>sentence_text</b> the text of the sentence
     * @var <b>categories_string</b> a string with the list of categories associated with each word in the sentence
     * @var <b>score</b> the score of the sentence
     */
    struct SentenceDetails : public SentenceSummary {
        int doc_position_begin{-1};
        int doc_position_end{-1};
        std::string sentence_text;
        std::string categories_string;
    };

    /*!
     * @struct Document
     * @brief generic information of a document
     *
     * @var <b>identifier</b> the identifier of the document
     * @var <b>score</b> the score of the document returned by a search
     * @var <b>year</b> the publication date, used to sort documents
     */
    struct Document {
        std::string identifier;
        double score{0};
        std::string year;
    };

    /*!
     * @struct DocumentSummary
     * @brief data structure that contains summary information related to a document as the result of a search
     *
     * @var <b>matching_sentences</b> the list of sentences contained in the document that match a sentence search
     */
    struct DocumentSummary : public Document {
        std::vector <SentenceSummary> matching_sentences;
    };

    /*!
     * @struct DocumentDetails
     * @brief data structure that contains detailed information related to a document as the result of a search
     *
     * @var <b>filepath</b> the filepath of the document
     * @var <b>fulltext</b> the fulltext of the document
     * @var <b>categories_string</b> the list of categories associated with the words in the fulltext
     * @var <b>abstract</b> the abstract of the document
     * @var <b>literature</b> the literature of the document
     * @var <b>accession</b> the accession of the document
     * @var <b>title</b> the title of the document
     * @var <b>author</b> the author(s) of the document
     * @var <b>journal</b> the journal of the document
     */
    struct DocumentDetails : public Document {
        std::string filepath;
        std::string fulltext;
        std::string categories_string;
        std::string abstract;
        std::string literature;
        std::string accession;
        std::string title;
        std::string author;
        std::string journal;
        std::vector <SentenceDetails> sentences_details;
    };

    /*!
     * query object
     */
    struct Query {
        QueryType type;
        std::string query_text;
        bool case_sensitive{false};
        bool sort_by_year{false};
        std::vector <std::string> subindices;
    };

    /*!
     * @struct SearchResults
     * @brief results generated by a search
     *
     * @var <b>query</b> the query that generated the result
     * @var <b>hit_socuments</b> the documents that match the search query
     * @var <b>total_num_sentences</b> number of sentences in the document
     * @var <b>max_score</b> documents highest score
     * @var <b>min_score</b> documents lowest score
     */
    struct SearchResults {
        Query query;
        std::vector <DocumentSummary> hit_documents;
        size_t total_num_sentences{0};
        double max_score{0};
        double min_score{DBL_MAX};
    };

    class index_exception : public std::exception {
        const char *what() const throw() override {
            return "index not found";
        }
    };

    /*!
     * search Textpresso Lucene index for documents
     */
    class TpcIndexReader {
    public:

        /*!
         * @brief search the Textpresso index for documents matching the provided Lucene query and return summary
         * information with a list of results sorted by score
         *
         * The results returned by this method contain basic information regarding the documents matching the searches
         *
         * Note that while the documents are sorted by score, their matched sentences, in case of sentence searches,
         * are not sorted in order to obtain better performances
         * @param index_root_dir the root dir of the Lucene indexes
         * @param query a query object
         * @param doc_ids limit the search to a set of document ids. This is useful for sentence queries to retrieve
         * the sentence ids for a set of documents obtained by a previous search without ids
         * @return the list of the documents matching the query sorted by their scores and encapsulated in a
         * SearchResutl object
         */
        static SearchResults search_documents(const std::string &index_root_dir, const Query &query,
                                              const std::set <std::string> &doc_ids = {});

        /*!
         * @brief get detailed information about a document specified by a DocumentSummary object
         *
         * @param doc_summary the DocumentSummary object that identifies the document
         * @param index_root_dir the root directory of the index containing information about the document
         * @param subindices the list of subindices to search
         * @param include_sentences_details whether to retrieve the details of the matching sentences specified in the
         * DocumentSummary object
         * @param include_doc_fields the list of fields to retrieve for the document. Retrieve all fields if not
         * specified
         * @param include_match_sentences_fields the list of fields to retrieve for the matching sentences specified in
         * the DocumentSummary object
         * @param exclude_doc_fields the list of fields to exclude for the document
         * @param exclude_match_sentences_fields the list of fields to exclude for the matching sentences specified in
         * the DocumentSummary object
         * @return the detailed information of the document
         */
        static DocumentDetails get_document_details(
                const DocumentSummary& doc_summary,
                const std::string& index_root_dir,
                const std::vector <std::string>& subindices,
                bool include_sentences_details = true,
                std::set <std::string> include_doc_fields = document_fields_detailed,
                std::set <std::string> include_match_sentences_fields = sentence_fields_detailed,
                const std::set <std::string>& exclude_doc_fields = {},
                const std::set <std::string>& exclude_match_sentences_fields = {});

        /*!
         * @brief get detailed information for a set of documents specified by a list of DocumentSummary objects
         *
         * @param doc_summaries a list of DocumentSummary object that identifies the documents to be searched and,
         * optionally, the list of sentences in the matching_sentences field of the document for which to retrieve
         * detailed information
         * @param index_root_dir the root directory of the index containing information about the document
         * @param subindices the list of subindices to search
         * @param sort_by_year whether to sort the results by year
         * @param include_sentences_details whether to retrieve the details of the matching sentences specified in the
         * DocumentSummary object
         * @param include_doc_fields the list of fields to retrieve for the document. Retrieve all fields if not
         * specified
         * @param include_match_sentences_fields the list of fields to retrieve for the matching sentences specified in
         * the DocumentSummary object
         * @param exclude_doc_fields the list of fields to exclude for the document
         * @param exclude_match_sentences_fields the list of fields to exclude for the matching sentences specified in
         * the DocumentSummary object
         * @return the detailed information of the document
         */
        static std::vector <DocumentDetails> get_documents_details(
                const std::vector <DocumentSummary>& doc_summaries,
                const std::string& index_root_dir,
                const std::vector <std::string>& subindices,
                bool sort_by_year,
                bool include_sentences_details = true,
                std::set <std::string> include_doc_fields = document_fields_detailed,
                std::set <std::string> include_match_sentences_fields = sentence_fields_detailed,
                const std::set <std::string>& exclude_doc_fields = {},
                const std::set <std::string>& exclude_match_sentences_fields = {});

        // comparators for reverse sorting of documents and sentence objects
        static bool document_score_gt(const Document &a, const Document &b) { return a.score > b.score; }

        static bool document_year_score_gt(const Document &a, const Document &b) {
            if (a.year != b.year) return a.year > b.year;
            return a.score > b.score;
        }

        static bool sentence_greater_than(const SentenceSummary &a, const SentenceSummary &b) {
            return a.score > b.score;
        }

    private:

        /*!
         * create a collection of sub-readers with multiple Lucene indexes
         * @param subindices the list of directory names for the indexed literatures
         * @param index_root_dir the name of the index to be read within the literatures
         * @param type the type of query to be performed by the subreaders
         * @param case_sensitive whether to get case sensitive subreaders
         * @return a collection of readers created from the Lucene indexes
         */
        static Lucene::Collection <Lucene::IndexReaderPtr> get_subreaders(const std::vector <std::string>& subindices,
                                                                          const std::string& index_root_dir,
                                                                          QueryType type, bool case_sensitive = false);

        /*!
         * collect and return document basic information for a collection of matches obtained from a document search
         * @param matches_collection the collection of documents matching the search query
         * @param subreaders the readers used during the search
         * @param searcher the searcher used during the search
         * @return the list of Document objects with information related to the matching documents, encapsulated in a
         * SearchResult object
         */
        static SearchResults read_documents_summaries(
                const Lucene::Collection <Lucene::ScoreDocPtr>& matches_collection,
                const Lucene::Collection <Lucene::IndexReaderPtr>& subreaders,
                Lucene::SearcherPtr searcher, bool sort_by_year = false);

        /*!
         * collect and return document information for a collection of matches obtained from a sentence search
         * @param matches_collection the collection of sentences matching the search query
         * @param subreaders the readers used during the search
         * @param searcher the searcher used during the search
         * @return the list of Document objects with information related to the matching sentences and their respective
         * documents, encapsulated in a SearchResult object
         */
        static SearchResults read_sentences_summaries(
                const Lucene::Collection <Lucene::ScoreDocPtr>& matches_collection,
                const Lucene::Collection <Lucene::IndexReaderPtr>& subreaders,
                Lucene::SearcherPtr searcher, bool sort_by_year = false, bool return_match_sentences_ids = false);

        /*!
         * get detailed information for a document specified by a DocumentSummary object
         * @param doc_summary a DocumentSummary object that identifies a document
         * @param doc_parser a Lucene query parser
         * @param searcher a Lucene searcher
         * @param fsel a Lucene field selector
         * @param fields the set of fields to be retrieved for the document
         * @return the details of the document
         */

        static DocumentDetails read_document_details(const DocumentSummary& doc_summary,
                                                     Lucene::QueryParserPtr doc_parser,
                                                     Lucene::SearcherPtr searcher,
                                                     Lucene::FieldSelectorPtr fsel,
                                                     const std::set <Lucene::String>& fields);

        /*!
         * get detailed information for the sentences of a document specifed by a DocumentSummary object and update the
         * respective information in the provided DocumentDetails object
         * @param doc_summary a DocumentSummary object that identifies a document
         * @param doc_details the DocumentDetails object to be updated with the new detailed information about the
         * sentences
         * @param sent_parser a Lucene query parser
         * @param searcher a Lucene searcher
         * @param fsel a Lucene field selector
         * @param fields the set of fields to be retrieved for the sentences
         * @return the details of the document
         */
        static void update_sentences_details_for_document(const DocumentSummary& doc_summary,
                                                          DocumentDetails& doc_details,
                                                          Lucene::QueryParserPtr sent_parser,
                                                          Lucene::SearcherPtr searcher,
                                                          Lucene::FieldSelectorPtr fsel,
                                                          const std::set <Lucene::String>& fields);

        static std::set <Lucene::String> compose_field_set(const std::set <std::string>& include_fields,
                                                           const std::set <std::string>& exclude_fields,
                                                           const std::set <std::string>& required_fields = {});

        static void update_document_details(DocumentDetails& doc_details, Lucene::String field,
                                            Lucene::DocumentPtr doc_ptr);

        static std::vector <DocumentDetails> read_documents_details(const std::vector <DocumentSummary>& doc_summaries,
                                                                    Lucene::QueryParserPtr doc_parser,
                                                                    Lucene::SearcherPtr searcher,
                                                                    Lucene::FieldSelectorPtr fsel,
                                                                    const std::set <Lucene::String>& fields);
    };
}


#endif //LIBTPC_TPCINDEXREADER_H
